type Query {
    findAllUsers: [User]
    findAllUsersFilterBy(filter: FilterUserEnum!, value: FilterUserInput!): [User]
}

type Mutation {
    createUser(user: UserInput!): User
}

input UserInput {
    email: ID!
    username: String!
    password: String!
    address: AddressInput!
    friends: [String]
}

input AddressInput {
    postalCode: String
    street: String
    streetNumber: String
    complement: String
}

input FilterUserInput {
    email: String
    username: String
    address: AddressInput
    friend: String
}

enum FilterUserEnum {
    email
    username
    address
    friend
}

type User {
    email: ID!
    username: String!
    address: Address!
    friends: [String]
}

type Address {
    postalCode: String!
    street: String!
    streetNumber: String!
    complement: String
}